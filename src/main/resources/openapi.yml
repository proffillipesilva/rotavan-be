openapi: 3.0.3
info:
  title: API RotaVan
  description: API para gestão de transporte escolar, incluindo cadastro de responsáveis, motoristas e escolas.
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Servidor de Desenvolvimento Local

tags:
  - name: Autenticação
    description: Endpoints para registo e login de utilizadores.
  - name: Utilizadores
    description: Operações relacionadas aos perfis dos utilizadores.
  - name: Imagens
    description: Endpoints para visualização de imagens.
  - name: Responsaveis
    description: Operações para gerir perfis de responsáveis.
  - name: Motoristas
    description: Operações para gerir perfis de motoristas.
  - name: Escolas
    description: Operações relacionadas às escolas.

security:
  - BearerAuth: []

paths:
  # ===============================================================
  # ENDPOINTS DE AUTENTICAÇÃO
  # ===============================================================
  /v1/api/auth/register:
    post:
      tags:
        - Autenticação
      summary: Regista um novo utilizador (Responsável) e retorna um token.
      operationId: registrarResponsavel
      security: []
      requestBody:
        description: Dados para o registo do novo Responsável.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registo bem-sucedido. Retorna um token JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Dados de registo inválidos.

  /v1/api/auth/register/motorista:
    post:
      tags:
        - Autenticação
      summary: Regista um novo utilizador (Motorista) e retorna um token.
      operationId: registrarMotorista
      security: []
      requestBody:
        description: Dados para o registo do novo Motorista.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotoristaRegisterRequest'
      responses:
        '200':
          description: Registo bem-sucedido. Retorna um token JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Dados de registo inválidos.

  /v1/api/auth/register/admin:
    post:
      tags:
        - Autenticação
      summary: Regista um novo utilizador (Admin) e retorna um token.
      operationId: registrarAdmin
      security: []
      requestBody:
        description: Dados para o registo do novo Admin.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegisterRequest'
      responses:
        '200':
          description: Registo bem-sucedido. Retorna um token JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Dados de registo inválidos.

  /v1/api/auth/login:
    post:
      tags:
        - Autenticação
      summary: Autentica um utilizador e retorna um token.
      operationId: loginUsuario
      security: []
      requestBody:
        description: Credenciais para login.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login bem-sucedido. Retorna um token JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '403':
          description: Email ou senha inválidos.

  # ===============================================================
  # ENDPOINTS DE UTILIZADORES
  # ===============================================================
  /v1/api/users/perfil/foto:
    put:
      tags:
        - Utilizadores
      summary: Upload da foto de perfil do utilizador.
      operationId: uploadFotoPerfil
      security:
        - BearerAuth: []
      requestBody:
        description: Ficheiro de imagem para o perfil.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload bem-sucedido.
        '400':
          description: Ficheiro inválido ou ausente.
        '401':
          description: Não autorizado.

  /v1/api/users/me:
    get:
      tags:
        - Utilizadores
      summary: Obtém as informações do perfil do utilizador autenticado.
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso. Retorna os dados do perfil do utilizador.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUserResponse'
        '401':
          description: Não autorizado.

  # ===============================================================
  # ENDPOINTS DE IMAGENS
  # ===============================================================
  /images/{filename}:
    get:
      tags:
        - Imagens
      summary: Obtém uma imagem pelo nome do ficheiro.
      operationId: getImage
      security: []
      parameters:
        - name: filename
          in: path
          required: true
          description: O nome do ficheiro da imagem.
          schema:
            type: string
        - name: thumbnail
          in: query
          description: Se deve retornar a miniatura (thumbnail) da imagem.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sucesso. Retorna o ficheiro da imagem.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Imagem não encontrada.

  # ===============================================================
  # ENDPOINTS DE RESPONSÁVEIS
  # ===============================================================
  /responsaveis:
    get:
      tags:
        - Responsaveis
      summary: Lista todos os perfis de responsáveis.
      operationId: listarResponsaveis
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso - Retorna a lista de perfis de responsáveis.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Responsaveis'

  /responsaveis/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID do perfil do responsável
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Responsaveis
      summary: Busca um perfil de responsável pelo ID.
      operationId: buscarResponsavelPorId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsaveis'
        '404':
          description: Perfil de Responsável não encontrado
    put:
      tags:
        - Responsaveis
      summary: Atualiza os dados de um perfil de responsável.
      operationId: atualizarResponsavel
      security:
        - BearerAuth: []
      requestBody:
        description: Objeto do responsável com os dados do perfil atualizados.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsaveisProfileInput'
      responses:
        '200':
          description: Atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsaveis'
        '404':
          description: Perfil de Responsável não encontrado
    delete:
      tags:
        - Responsaveis
      summary: Apaga um utilizador e seu perfil de responsável.
      operationId: apagarResponsavel
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Apagado com sucesso (Sem conteúdo)
        '404':
          description: Perfil de Responsável não encontrado

  /responsaveis/{responsavelId}/criancas:
    parameters:
      - name: responsavelId
        in: path
        required: true
        description: O ID do perfil do responsável ao qual a criança será adicionada
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Responsaveis
      summary: Adiciona uma nova criança a um perfil de responsável existente.
      operationId: adicionarCrianca
      security:
        - BearerAuth: []
      requestBody:
        description: Objeto da nova criança a ser adicionada.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriancaInput'
      responses:
        '201':
          description: Criança adicionada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crianca'
        '404':
          description: Perfil de Responsável não encontrado

  # ===============================================================
  # ENDPOINTS DE MOTORISTAS
  # ===============================================================
  /motoristas:
    get:
      tags:
        - Motoristas
      summary: Lista todos os perfis de motoristas.
      operationId: listarMotoristas
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso - Retorna a lista de perfis de motoristas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motoristas'

  /motoristas/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID do perfil do motorista
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Motoristas
      summary: Busca um perfil de motorista pelo ID.
      operationId: buscarMotoristaPorId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motoristas'
        '404':
          description: Perfil de Motorista não encontrado
    put:
      tags:
        - Motoristas
      summary: Atualiza os dados de um perfil de motorista.
      operationId: atualizarMotorista
      security:
        - BearerAuth: []
      requestBody:
        description: Objeto do motorista com os dados do perfil atualizados.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotoristasProfileInput'
      responses:
        '200':
          description: Atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motoristas'
        '404':
          description: Perfil de Motorista não encontrado
    delete:
      tags:
        - Motoristas
      summary: Apaga um utilizador e seu perfil de motorista.
      operationId: apagarMotorista
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Apagado com sucesso (Sem conteúdo)
        '404':
          description: Perfil de Motorista não encontrado

  # ===============================================================
  # ENDPOINTS DE ESCOLAS
  # ===============================================================
  /escolas:
    get:
      tags:
        - Escolas
      summary: Lista todas as escolas.
      operationId: listarEscolas
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso - Retorna a lista de escolas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Escolas'
    post:
      tags:
        - Escolas
      summary: Cria uma nova escola.
      operationId: criarEscola
      security:
        - BearerAuth: [] # Geralmente criar escola seria uma tarefa de admin
      requestBody:
        description: Objeto da escola a ser criada.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscolasInput'
      responses:
        '201':
          description: Criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escolas'
        '400':
          description: Requisição inválida

  /escolas/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID da escola
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Escolas
      summary: Busca uma escola pelo ID.
      operationId: buscarEscolaPorId
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escolas'
        '404':
          description: Escola não encontrada
    put:
      tags:
        - Escolas
      summary: Atualiza uma escola existente.
      operationId: atualizarEscola
      security:
        - BearerAuth: []
      requestBody:
        description: Objeto da escola com os dados atualizados.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscolasInput'
      responses:
        '200':
          description: Atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escolas'
        '404':
          description: Escola não encontrada
    delete:
      tags:
        - Escolas
      summary: Apaga uma escola.
      operationId: apagarEscola
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Apagada com sucesso (Sem conteúdo)
        '404':
          description: Escola não encontrada

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [ "email", "password", "nomeResponsavel", "cpfResponsavel", "enderecoCasa" ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        nomeResponsavel:
          type: string
        cpfResponsavel:
          type: string
        enderecoCasa:
          type: string
        criancas:
          type: array
          items:
            $ref: '#/components/schemas/CriancaRegisterDTO'

    MotoristaRegisterRequest:
      type: object
      required: [ "email", "password", "nomeMotorista", "cnh", "cpf", "placaVeiculo" ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        nomeMotorista:
          type: string
        cnh:
          type: integer
          format: int64
        cpf:
          type: integer
          format: int64
        placaVeiculo:
          type: string

    AdminRegisterRequest:
      type: object
      required: [ "nome", "email", "password" ]
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    LoginRequest:
      type: object
      required: [ "email", "password" ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    MyUserResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        nome:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        picture:
          type: string
        cpfResponsavel:
          type: string
        enderecoCasa:
          type: string
        cnh:
          type: integer
          format: int64
        cpfMotorista:
          type: integer
          format: int64
        placaVeiculo:
          type: string

    Responsaveis:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        nomeResponsavel:
          type: string
        cpfResponsavel:
          type: string
        enderecoCasa:
          type: string
        criancas:
          type: array
          items:
            $ref: '#/components/schemas/Crianca'
          readOnly: true

    ResponsaveisProfileInput:
      type: object
      properties:
        nomeResponsavel:
          type: string
        cpfResponsavel:
          type: string
        enderecoCasa:
          type: string

    Crianca:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        nome:
          type: string
        escola:
          $ref: '#/components/schemas/Escolas'

    CriancaInput:
      type: object
      required:
        - nome
        - escola
      properties:
        nome:
          type: string
        escola:
          type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              description: O ID da escola onde a criança estuda. A escola já deve existir.

    CriancaRegisterDTO:
      type: object
      required:
        - nome
        - escolaId
      properties:
        nome:
          type: string
        escolaId:
          type: string
          format: uuid
          description: O ID da escola onde a criança estuda. A escola já deve existir.

    Motoristas:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        nomeMotorista:
          type: string
        cnh:
          type: integer
          format: int64
        cpf:
          type: integer
          format: int64
        placaVeiculo:
          type: string

    MotoristasProfileInput:
      type: object
      properties:
        nomeMotorista:
          type: string
        cnh:
          type: integer
          format: int64
        cpf:
          type: integer
          format: int64
        placaVeiculo:
          type: string

    Escolas:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        nome:
          type: string
        cnpj:
          type: string
        endereco:
          type: string
        telefone:
          type: string

    EscolasInput:
      type: object
      required:
        - nome
        - cnpj
        - endereco
      properties:
        nome:
          type: string
        cnpj:
          type: string
        endereco:
          type: string
        telefone:
          type: string